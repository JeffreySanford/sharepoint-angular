{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/card\";\nimport * as i3 from \"@angular/material/progress-spinner\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"@angular/material/tooltip\";\nfunction TeamsMessagesComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"div\", 8);\n    i0.…µ…µelement(1, \"mat-spinner\", 9);\n    i0.…µ…µelementStart(2, \"span\");\n    i0.…µ…µtext(3, \"Loading Teams messages...\");\n    i0.…µ…µelementEnd()();\n  }\n}\nfunction TeamsMessagesComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"div\", 10)(1, \"mat-icon\");\n    i0.…µ…µtext(2, \"chat_bubble_outline\");\n    i0.…µ…µelementEnd();\n    i0.…µ…µelementStart(3, \"p\");\n    i0.…µ…µtext(4, \"No recent messages found\");\n    i0.…µ…µelementEnd()();\n  }\n}\nfunction TeamsMessagesComponent_div_12_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.…µ…µgetCurrentView();\n    i0.…µ…µelementStart(0, \"div\", 13)(1, \"div\", 14)(2, \"div\", 15)(3, \"mat-icon\", 16);\n    i0.…µ…µtext(4, \"person\");\n    i0.…µ…µelementEnd();\n    i0.…µ…µelementStart(5, \"span\", 17);\n    i0.…µ…µtext(6);\n    i0.…µ…µelementEnd()();\n    i0.…µ…µelementStart(7, \"div\", 18)(8, \"mat-icon\", 19);\n    i0.…µ…µtext(9, \"schedule\");\n    i0.…µ…µelementEnd();\n    i0.…µ…µelementStart(10, \"span\");\n    i0.…µ…µtext(11);\n    i0.…µ…µelementEnd()()();\n    i0.…µ…µelement(12, \"div\", 20);\n    i0.…µ…µelementStart(13, \"div\", 21)(14, \"button\", 22);\n    i0.…µ…µlistener(\"click\", function TeamsMessagesComponent_div_12_div_1_Template_button_click_14_listener() {\n      const restoredCtx = i0.…µ…µrestoreView(_r6);\n      const message_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.…µ…µnextContext(2);\n      return i0.…µ…µresetView(ctx_r5.openInTeams(message_r4));\n    });\n    i0.…µ…µelementStart(15, \"mat-icon\");\n    i0.…µ…µtext(16, \"open_in_new\");\n    i0.…µ…µelementEnd()()()();\n  }\n  if (rf & 2) {\n    const message_r4 = ctx.$implicit;\n    const ctx_r3 = i0.…µ…µnextContext(2);\n    i0.…µ…µadvance(6);\n    i0.…µ…µtextInterpolate(message_r4.from.user.displayName);\n    i0.…µ…µadvance(5);\n    i0.…µ…µtextInterpolate(ctx_r3.formatMessageTime(message_r4.createdDateTime));\n    i0.…µ…µadvance(1);\n    i0.…µ…µproperty(\"innerHTML\", ctx_r3.sanitizeMessageContent(message_r4.body.content), i0.…µ…µsanitizeHtml);\n  }\n}\nfunction TeamsMessagesComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"div\", 11);\n    i0.…µ…µtemplate(1, TeamsMessagesComponent_div_12_div_1_Template, 17, 3, \"div\", 12);\n    i0.…µ…µelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.…µ…µnextContext();\n    i0.…µ…µadvance(1);\n    i0.…µ…µproperty(\"ngForOf\", ctx_r2.messages)(\"ngForTrackBy\", ctx_r2.trackByMessageId);\n  }\n}\nexport let TeamsMessagesComponent = /*#__PURE__*/(() => {\n  class TeamsMessagesComponent {\n    constructor() {\n      this.messages = [];\n      this.isLoading = true;\n      this.subscriptions = new Subscription();\n    }\n    ngOnInit() {\n      this.loadMockMessages();\n      // Auto-refresh every 30 seconds\n      const refreshSub = setInterval(() => {\n        this.loadMockMessages();\n      }, 30000);\n      this.subscriptions.add(() => clearInterval(refreshSub));\n    }\n    ngOnDestroy() {\n      this.subscriptions.unsubscribe();\n    }\n    // Mock data for demonstration\n    loadMockMessages() {\n      this.isLoading = true;\n      // Simulate API delay\n      setTimeout(() => {\n        this.messages = [{\n          id: '1',\n          createdDateTime: new Date(Date.now() - 300000).toISOString(),\n          body: {\n            content: 'Server maintenance completed successfully. All systems are back online.',\n            contentType: 'text'\n          },\n          from: {\n            user: {\n              displayName: 'John Smith',\n              id: 'user1'\n            }\n          },\n          importance: 'high',\n          messageType: 'message'\n        }, {\n          id: '2',\n          createdDateTime: new Date(Date.now() - 900000).toISOString(),\n          body: {\n            content: 'Monitoring dashboard looks great! üëç The uptime metrics are very helpful.',\n            contentType: 'text'\n          },\n          from: {\n            user: {\n              displayName: 'Sarah Johnson',\n              id: 'user2'\n            }\n          },\n          importance: 'normal',\n          messageType: 'message'\n        }, {\n          id: '3',\n          createdDateTime: new Date(Date.now() - 1800000).toISOString(),\n          body: {\n            content: 'Alert: CPU usage spike detected on production server. Investigating...',\n            contentType: 'text'\n          },\n          from: {\n            user: {\n              displayName: 'DevOps Bot',\n              id: 'bot1'\n            }\n          },\n          importance: 'urgent',\n          messageType: 'message'\n        }, {\n          id: '4',\n          createdDateTime: new Date(Date.now() - 3600000).toISOString(),\n          body: {\n            content: 'Daily backup completed successfully. All data secured.',\n            contentType: 'text'\n          },\n          from: {\n            user: {\n              displayName: 'Backup Service',\n              id: 'service1'\n            }\n          },\n          importance: 'normal',\n          messageType: 'message'\n        }];\n        this.isLoading = false;\n      }, 1500); // 1.5 second delay to show loading\n    }\n\n    refreshMessages() {\n      this.loadMockMessages();\n    }\n    configureChannels() {\n      // Open dialog to configure which channels to monitor\n      console.log('Configure channels dialog would open here');\n      alert('Channel configuration coming soon! This will let you choose which Teams channels to monitor.');\n    }\n    trackByMessageId(index, message) {\n      return message.id;\n    }\n    formatMessageTime(dateTime) {\n      const date = new Date(dateTime);\n      const now = new Date();\n      const diffMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n      if (diffMinutes < 1) return 'Just now';\n      if (diffMinutes < 60) return `${diffMinutes}m ago`;\n      if (diffMinutes < 1440) return `${Math.floor(diffMinutes / 60)}h ago`;\n      return date.toLocaleDateString();\n    }\n    sanitizeMessageContent(content) {\n      // Basic HTML sanitization - in production, use DOMPurify\n      return content.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '').replace(/javascript:/gi, '').substring(0, 200) + (content.length > 200 ? '...' : '');\n    }\n    openInTeams(message) {\n      // Mock action - would open message in Teams client\n      console.log('Would open in Teams:', message);\n      alert(`Would open message from ${message.from.user.displayName} in Teams app`);\n    }\n    static {\n      this.…µfac = function TeamsMessagesComponent_Factory(t) {\n        return new (t || TeamsMessagesComponent)();\n      };\n    }\n    static {\n      this.…µcmp = /*@__PURE__*/i0.…µ…µdefineComponent({\n        type: TeamsMessagesComponent,\n        selectors: [[\"app-teams-messages\"]],\n        decls: 22,\n        vars: 4,\n        consts: [[\"appearance\", \"outlined\", 1, \"teams-card\"], [\"mat-card-avatar\", \"\", 1, \"teams-avatar\"], [1, \"avatar-icon\"], [\"class\", \"loading-messages\", 4, \"ngIf\"], [\"class\", \"no-messages\", 4, \"ngIf\"], [\"class\", \"messages-container\", 4, \"ngIf\"], [\"mat-button\", \"\", \"color\", \"primary\", 3, \"disabled\", \"click\"], [\"mat-button\", \"\", \"color\", \"accent\", 3, \"click\"], [1, \"loading-messages\"], [\"diameter\", \"30\"], [1, \"no-messages\"], [1, \"messages-container\"], [\"class\", \"message-item\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"message-item\"], [1, \"message-header\"], [1, \"message-author\"], [1, \"author-icon\"], [1, \"author-name\"], [1, \"message-time\"], [1, \"time-icon\"], [1, \"message-content\", 3, \"innerHTML\"], [1, \"message-actions\"], [\"mat-icon-button\", \"\", \"matTooltip\", \"View in Teams\", 3, \"click\"]],\n        template: function TeamsMessagesComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.…µ…µelementStart(0, \"mat-card\", 0)(1, \"mat-card-header\")(2, \"div\", 1)(3, \"mat-icon\", 2);\n            i0.…µ…µtext(4, \"forum\");\n            i0.…µ…µelementEnd()();\n            i0.…µ…µelementStart(5, \"mat-card-title\");\n            i0.…µ…µtext(6, \"Teams Messages\");\n            i0.…µ…µelementEnd();\n            i0.…µ…µelementStart(7, \"mat-card-subtitle\");\n            i0.…µ…µtext(8, \"Recent activity from monitored channels\");\n            i0.…µ…µelementEnd()();\n            i0.…µ…µelementStart(9, \"mat-card-content\");\n            i0.…µ…µtemplate(10, TeamsMessagesComponent_div_10_Template, 4, 0, \"div\", 3);\n            i0.…µ…µtemplate(11, TeamsMessagesComponent_div_11_Template, 5, 0, \"div\", 4);\n            i0.…µ…µtemplate(12, TeamsMessagesComponent_div_12_Template, 2, 2, \"div\", 5);\n            i0.…µ…µelementEnd();\n            i0.…µ…µelementStart(13, \"mat-card-actions\")(14, \"button\", 6);\n            i0.…µ…µlistener(\"click\", function TeamsMessagesComponent_Template_button_click_14_listener() {\n              return ctx.refreshMessages();\n            });\n            i0.…µ…µelementStart(15, \"mat-icon\");\n            i0.…µ…µtext(16, \"refresh\");\n            i0.…µ…µelementEnd();\n            i0.…µ…µtext(17, \" Refresh Messages \");\n            i0.…µ…µelementEnd();\n            i0.…µ…µelementStart(18, \"button\", 7);\n            i0.…µ…µlistener(\"click\", function TeamsMessagesComponent_Template_button_click_18_listener() {\n              return ctx.configureChannels();\n            });\n            i0.…µ…µelementStart(19, \"mat-icon\");\n            i0.…µ…µtext(20, \"settings\");\n            i0.…µ…µelementEnd();\n            i0.…µ…µtext(21, \" Configure Channels \");\n            i0.…µ…µelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.…µ…µadvance(10);\n            i0.…µ…µproperty(\"ngIf\", ctx.isLoading);\n            i0.…µ…µadvance(1);\n            i0.…µ…µproperty(\"ngIf\", !ctx.isLoading && ctx.messages.length === 0);\n            i0.…µ…µadvance(1);\n            i0.…µ…µproperty(\"ngIf\", !ctx.isLoading && ctx.messages.length > 0);\n            i0.…µ…µadvance(2);\n            i0.…µ…µproperty(\"disabled\", ctx.isLoading);\n          }\n        },\n        dependencies: [i1.NgForOf, i1.NgIf, i2.MatCard, i2.MatCardActions, i2.MatCardAvatar, i2.MatCardContent, i2.MatCardHeader, i2.MatCardSubtitle, i2.MatCardTitle, i3.MatProgressSpinner, i4.MatButton, i4.MatIconButton, i5.MatIcon, i6.MatTooltip],\n        styles: [\".teams-card[_ngcontent-%COMP%]{margin:16px 0;max-height:600px}.teams-card[_ngcontent-%COMP%]   .teams-avatar[_ngcontent-%COMP%]{background:linear-gradient(135deg,#6264a7 0%,#5558c9 100%);color:#fff}.teams-card[_ngcontent-%COMP%]   .teams-avatar[_ngcontent-%COMP%]   .avatar-icon[_ngcontent-%COMP%]{font-size:24px}.loading-messages[_ngcontent-%COMP%]{display:flex;align-items:center;gap:12px;padding:20px;justify-content:center}.no-messages[_ngcontent-%COMP%]{text-align:center;padding:40px 20px;color:#0009}.no-messages[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{font-size:48px;width:48px;height:48px;margin-bottom:16px;opacity:.5}.messages-container[_ngcontent-%COMP%]{max-height:400px;overflow-y:auto;padding:8px 0}.message-item[_ngcontent-%COMP%]{padding:12px;border-left:3px solid #6264a7;margin-bottom:12px;background:#f8f9fa;border-radius:8px;transition:all .2s ease}.message-item[_ngcontent-%COMP%]:hover{background:#f0f0f0;transform:translate(2px)}.message-item[_ngcontent-%COMP%]:last-child{margin-bottom:0}.message-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}.message-author[_ngcontent-%COMP%]{display:flex;align-items:center;gap:6px}.message-author[_ngcontent-%COMP%]   .author-icon[_ngcontent-%COMP%]{font-size:16px;width:16px;height:16px;color:#6264a7}.message-author[_ngcontent-%COMP%]   .author-name[_ngcontent-%COMP%]{font-weight:500;font-size:14px}.message-time[_ngcontent-%COMP%]{display:flex;align-items:center;gap:4px;color:#0009;font-size:12px}.message-time[_ngcontent-%COMP%]   .time-icon[_ngcontent-%COMP%]{font-size:14px;width:14px;height:14px}.message-content[_ngcontent-%COMP%]{margin:8px 0;line-height:1.4;color:#000000de;font-size:14px}.message-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:4px 0}.message-content[_ngcontent-%COMP%]   .mention[_ngcontent-%COMP%]{color:#6264a7;font-weight:500}.message-content[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{color:#6264a7;text-decoration:none}.message-content[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{text-decoration:underline}.message-actions[_ngcontent-%COMP%]{display:flex;justify-content:flex-end;margin-top:8px}.message-actions[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{opacity:.7;transition:opacity .2s ease}.message-actions[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{opacity:1}@media (max-width: 600px){.message-header[_ngcontent-%COMP%]{flex-direction:column;align-items:flex-start;gap:4px}.message-time[_ngcontent-%COMP%]{font-size:11px}}@media (prefers-color-scheme: dark){.message-item[_ngcontent-%COMP%]{background:#2d2d2d;border-left-color:#7b68ee}.message-item[_ngcontent-%COMP%]:hover{background:#3d3d3d}.message-content[_ngcontent-%COMP%]{color:#ffffffde}.message-time[_ngcontent-%COMP%]{color:#fff9}}\"]\n      });\n    }\n  }\n  return TeamsMessagesComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/card\";\nimport * as i3 from \"@angular/material/progress-spinner\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"@angular/material/tooltip\";\nfunction TeamsMessagesComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"div\", 8);\n    i0.…µ…µelement(1, \"mat-spinner\", 9);\n    i0.…µ…µelementStart(2, \"span\");\n    i0.…µ…µtext(3, \"Loading Teams messages...\");\n    i0.…µ…µelementEnd()();\n  }\n}\nfunction TeamsMessagesComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"div\", 10)(1, \"mat-icon\");\n    i0.…µ…µtext(2, \"chat_bubble_outline\");\n    i0.…µ…µelementEnd();\n    i0.…µ…µelementStart(3, \"p\");\n    i0.…µ…µtext(4, \"No recent messages found\");\n    i0.…µ…µelementEnd()();\n  }\n}\nfunction TeamsMessagesComponent_div_12_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.…µ…µgetCurrentView();\n    i0.…µ…µelementStart(0, \"div\", 13)(1, \"div\", 14)(2, \"div\", 15)(3, \"mat-icon\", 16);\n    i0.…µ…µtext(4, \"person\");\n    i0.…µ…µelementEnd();\n    i0.…µ…µelementStart(5, \"span\", 17);\n    i0.…µ…µtext(6);\n    i0.…µ…µelementEnd()();\n    i0.…µ…µelementStart(7, \"div\", 18)(8, \"mat-icon\", 19);\n    i0.…µ…µtext(9, \"schedule\");\n    i0.…µ…µelementEnd();\n    i0.…µ…µelementStart(10, \"span\");\n    i0.…µ…µtext(11);\n    i0.…µ…µelementEnd()()();\n    i0.…µ…µelement(12, \"div\", 20);\n    i0.…µ…µelementStart(13, \"div\", 21)(14, \"button\", 22);\n    i0.…µ…µlistener(\"click\", function TeamsMessagesComponent_div_12_div_1_Template_button_click_14_listener() {\n      const restoredCtx = i0.…µ…µrestoreView(_r6);\n      const message_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.…µ…µnextContext(2);\n      return i0.…µ…µresetView(ctx_r5.openInTeams(message_r4));\n    });\n    i0.…µ…µelementStart(15, \"mat-icon\");\n    i0.…µ…µtext(16, \"open_in_new\");\n    i0.…µ…µelementEnd()()()();\n  }\n  if (rf & 2) {\n    const message_r4 = ctx.$implicit;\n    const ctx_r3 = i0.…µ…µnextContext(2);\n    i0.…µ…µadvance(6);\n    i0.…µ…µtextInterpolate(message_r4.from.user.displayName);\n    i0.…µ…µadvance(5);\n    i0.…µ…µtextInterpolate(ctx_r3.formatMessageTime(message_r4.createdDateTime));\n    i0.…µ…µadvance(1);\n    i0.…µ…µproperty(\"innerHTML\", ctx_r3.sanitizeMessageContent(message_r4.body.content), i0.…µ…µsanitizeHtml);\n  }\n}\nfunction TeamsMessagesComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"div\", 11);\n    i0.…µ…µtemplate(1, TeamsMessagesComponent_div_12_div_1_Template, 17, 3, \"div\", 12);\n    i0.…µ…µelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.…µ…µnextContext();\n    i0.…µ…µadvance(1);\n    i0.…µ…µproperty(\"ngForOf\", ctx_r2.messages)(\"ngForTrackBy\", ctx_r2.trackByMessageId);\n  }\n}\nexport class TeamsMessagesComponent {\n  constructor() {\n    this.messages = [];\n    this.isLoading = true;\n    this.subscriptions = new Subscription();\n  }\n  ngOnInit() {\n    this.loadMockMessages();\n    // Auto-refresh every 30 seconds\n    const refreshSub = setInterval(() => {\n      this.loadMockMessages();\n    }, 30000);\n    this.subscriptions.add(() => clearInterval(refreshSub));\n  }\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n  // Mock data for demonstration\n  loadMockMessages() {\n    this.isLoading = true;\n    // Simulate API delay\n    setTimeout(() => {\n      this.messages = [{\n        id: '1',\n        createdDateTime: new Date(Date.now() - 300000).toISOString(),\n        body: {\n          content: 'Server maintenance completed successfully. All systems are back online.',\n          contentType: 'text'\n        },\n        from: {\n          user: {\n            displayName: 'John Smith',\n            id: 'user1'\n          }\n        },\n        importance: 'high',\n        messageType: 'message'\n      }, {\n        id: '2',\n        createdDateTime: new Date(Date.now() - 900000).toISOString(),\n        body: {\n          content: 'Monitoring dashboard looks great! üëç The uptime metrics are very helpful.',\n          contentType: 'text'\n        },\n        from: {\n          user: {\n            displayName: 'Sarah Johnson',\n            id: 'user2'\n          }\n        },\n        importance: 'normal',\n        messageType: 'message'\n      }, {\n        id: '3',\n        createdDateTime: new Date(Date.now() - 1800000).toISOString(),\n        body: {\n          content: 'Alert: CPU usage spike detected on production server. Investigating...',\n          contentType: 'text'\n        },\n        from: {\n          user: {\n            displayName: 'DevOps Bot',\n            id: 'bot1'\n          }\n        },\n        importance: 'urgent',\n        messageType: 'message'\n      }, {\n        id: '4',\n        createdDateTime: new Date(Date.now() - 3600000).toISOString(),\n        body: {\n          content: 'Daily backup completed successfully. All data secured.',\n          contentType: 'text'\n        },\n        from: {\n          user: {\n            displayName: 'Backup Service',\n            id: 'service1'\n          }\n        },\n        importance: 'normal',\n        messageType: 'message'\n      }];\n      this.isLoading = false;\n    }, 1500); // 1.5 second delay to show loading\n  }\n\n  refreshMessages() {\n    this.loadMockMessages();\n  }\n  configureChannels() {\n    // Open dialog to configure which channels to monitor\n    console.log('Configure channels dialog would open here');\n    alert('Channel configuration coming soon! This will let you choose which Teams channels to monitor.');\n  }\n  trackByMessageId(index, message) {\n    return message.id;\n  }\n  formatMessageTime(dateTime) {\n    const date = new Date(dateTime);\n    const now = new Date();\n    const diffMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    if (diffMinutes < 1) return 'Just now';\n    if (diffMinutes < 60) return `${diffMinutes}m ago`;\n    if (diffMinutes < 1440) return `${Math.floor(diffMinutes / 60)}h ago`;\n    return date.toLocaleDateString();\n  }\n  sanitizeMessageContent(content) {\n    // Basic HTML sanitization - in production, use DOMPurify\n    return content.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '').replace(/javascript:/gi, '').substring(0, 200) + (content.length > 200 ? '...' : '');\n  }\n  openInTeams(message) {\n    // Mock action - would open message in Teams client\n    console.log('Would open in Teams:', message);\n    alert(`Would open message from ${message.from.user.displayName} in Teams app`);\n  }\n  static {\n    this.…µfac = function TeamsMessagesComponent_Factory(t) {\n      return new (t || TeamsMessagesComponent)();\n    };\n  }\n  static {\n    this.…µcmp = /*@__PURE__*/i0.…µ…µdefineComponent({\n      type: TeamsMessagesComponent,\n      selectors: [[\"app-teams-messages\"]],\n      decls: 22,\n      vars: 4,\n      consts: [[\"appearance\", \"outlined\", 1, \"teams-card\"], [\"mat-card-avatar\", \"\", 1, \"teams-avatar\"], [1, \"avatar-icon\"], [\"class\", \"loading-messages\", 4, \"ngIf\"], [\"class\", \"no-messages\", 4, \"ngIf\"], [\"class\", \"messages-container\", 4, \"ngIf\"], [\"mat-button\", \"\", \"color\", \"primary\", 3, \"disabled\", \"click\"], [\"mat-button\", \"\", \"color\", \"accent\", 3, \"click\"], [1, \"loading-messages\"], [\"diameter\", \"30\"], [1, \"no-messages\"], [1, \"messages-container\"], [\"class\", \"message-item\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"message-item\"], [1, \"message-header\"], [1, \"message-author\"], [1, \"author-icon\"], [1, \"author-name\"], [1, \"message-time\"], [1, \"time-icon\"], [1, \"message-content\", 3, \"innerHTML\"], [1, \"message-actions\"], [\"mat-icon-button\", \"\", \"matTooltip\", \"View in Teams\", 3, \"click\"]],\n      template: function TeamsMessagesComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.…µ…µelementStart(0, \"mat-card\", 0)(1, \"mat-card-header\")(2, \"div\", 1)(3, \"mat-icon\", 2);\n          i0.…µ…µtext(4, \"forum\");\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelementStart(5, \"mat-card-title\");\n          i0.…µ…µtext(6, \"Teams Messages\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(7, \"mat-card-subtitle\");\n          i0.…µ…µtext(8, \"Recent activity from monitored channels\");\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelementStart(9, \"mat-card-content\");\n          i0.…µ…µtemplate(10, TeamsMessagesComponent_div_10_Template, 4, 0, \"div\", 3);\n          i0.…µ…µtemplate(11, TeamsMessagesComponent_div_11_Template, 5, 0, \"div\", 4);\n          i0.…µ…µtemplate(12, TeamsMessagesComponent_div_12_Template, 2, 2, \"div\", 5);\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(13, \"mat-card-actions\")(14, \"button\", 6);\n          i0.…µ…µlistener(\"click\", function TeamsMessagesComponent_Template_button_click_14_listener() {\n            return ctx.refreshMessages();\n          });\n          i0.…µ…µelementStart(15, \"mat-icon\");\n          i0.…µ…µtext(16, \"refresh\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µtext(17, \" Refresh Messages \");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(18, \"button\", 7);\n          i0.…µ…µlistener(\"click\", function TeamsMessagesComponent_Template_button_click_18_listener() {\n            return ctx.configureChannels();\n          });\n          i0.…µ…µelementStart(19, \"mat-icon\");\n          i0.…µ…µtext(20, \"settings\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µtext(21, \" Configure Channels \");\n          i0.…µ…µelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.…µ…µadvance(10);\n          i0.…µ…µproperty(\"ngIf\", ctx.isLoading);\n          i0.…µ…µadvance(1);\n          i0.…µ…µproperty(\"ngIf\", !ctx.isLoading && ctx.messages.length === 0);\n          i0.…µ…µadvance(1);\n          i0.…µ…µproperty(\"ngIf\", !ctx.isLoading && ctx.messages.length > 0);\n          i0.…µ…µadvance(2);\n          i0.…µ…µproperty(\"disabled\", ctx.isLoading);\n        }\n      },\n      dependencies: [i1.NgForOf, i1.NgIf, i2.MatCard, i2.MatCardActions, i2.MatCardAvatar, i2.MatCardContent, i2.MatCardHeader, i2.MatCardSubtitle, i2.MatCardTitle, i3.MatProgressSpinner, i4.MatButton, i4.MatIconButton, i5.MatIcon, i6.MatTooltip],\n      styles: [\".teams-card[_ngcontent-%COMP%] {\\n  margin: 16px 0;\\n  max-height: 600px;\\n}\\n.teams-card[_ngcontent-%COMP%]   .teams-avatar[_ngcontent-%COMP%] {\\n  background: linear-gradient(135deg, #6264a7 0%, #5558c9 100%);\\n  color: white;\\n}\\n.teams-card[_ngcontent-%COMP%]   .teams-avatar[_ngcontent-%COMP%]   .avatar-icon[_ngcontent-%COMP%] {\\n  font-size: 24px;\\n}\\n\\n.loading-messages[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  gap: 12px;\\n  padding: 20px;\\n  justify-content: center;\\n}\\n\\n.no-messages[_ngcontent-%COMP%] {\\n  text-align: center;\\n  padding: 40px 20px;\\n  color: rgba(0, 0, 0, 0.6);\\n}\\n.no-messages[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%] {\\n  font-size: 48px;\\n  width: 48px;\\n  height: 48px;\\n  margin-bottom: 16px;\\n  opacity: 0.5;\\n}\\n\\n.messages-container[_ngcontent-%COMP%] {\\n  max-height: 400px;\\n  overflow-y: auto;\\n  padding: 8px 0;\\n}\\n\\n.message-item[_ngcontent-%COMP%] {\\n  padding: 12px;\\n  border-left: 3px solid #6264a7;\\n  margin-bottom: 12px;\\n  background: #f8f9fa;\\n  border-radius: 8px;\\n  transition: all 0.2s ease;\\n}\\n.message-item[_ngcontent-%COMP%]:hover {\\n  background: #f0f0f0;\\n  transform: translateX(2px);\\n}\\n.message-item[_ngcontent-%COMP%]:last-child {\\n  margin-bottom: 0;\\n}\\n\\n.message-header[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  margin-bottom: 8px;\\n}\\n\\n.message-author[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  gap: 6px;\\n}\\n.message-author[_ngcontent-%COMP%]   .author-icon[_ngcontent-%COMP%] {\\n  font-size: 16px;\\n  width: 16px;\\n  height: 16px;\\n  color: #6264a7;\\n}\\n.message-author[_ngcontent-%COMP%]   .author-name[_ngcontent-%COMP%] {\\n  font-weight: 500;\\n  font-size: 14px;\\n}\\n\\n.message-time[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  gap: 4px;\\n  color: rgba(0, 0, 0, 0.6);\\n  font-size: 12px;\\n}\\n.message-time[_ngcontent-%COMP%]   .time-icon[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  width: 14px;\\n  height: 14px;\\n}\\n\\n.message-content[_ngcontent-%COMP%] {\\n  margin: 8px 0;\\n  line-height: 1.4;\\n  color: rgba(0, 0, 0, 0.87);\\n  font-size: 14px;\\n}\\n.message-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  margin: 4px 0;\\n}\\n.message-content[_ngcontent-%COMP%]   .mention[_ngcontent-%COMP%] {\\n  color: #6264a7;\\n  font-weight: 500;\\n}\\n.message-content[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\\n  color: #6264a7;\\n  text-decoration: none;\\n}\\n.message-content[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover {\\n  text-decoration: underline;\\n}\\n\\n.message-actions[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: flex-end;\\n  margin-top: 8px;\\n}\\n.message-actions[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  opacity: 0.7;\\n  transition: opacity 0.2s ease;\\n}\\n.message-actions[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover {\\n  opacity: 1;\\n}\\n\\n@media (max-width: 600px) {\\n  .message-header[_ngcontent-%COMP%] {\\n    flex-direction: column;\\n    align-items: flex-start;\\n    gap: 4px;\\n  }\\n  .message-time[_ngcontent-%COMP%] {\\n    font-size: 11px;\\n  }\\n}\\n@media (prefers-color-scheme: dark) {\\n  .message-item[_ngcontent-%COMP%] {\\n    background: #2d2d2d;\\n    border-left-color: #7b68ee;\\n  }\\n  .message-item[_ngcontent-%COMP%]:hover {\\n    background: #3d3d3d;\\n  }\\n  .message-content[_ngcontent-%COMP%] {\\n    color: rgba(255, 255, 255, 0.87);\\n  }\\n  .message-time[_ngcontent-%COMP%] {\\n    color: rgba(255, 255, 255, 0.6);\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdGVhbXMtbWVzc2FnZXMvdGVhbXMtbWVzc2FnZXMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFBO0VBQ0EsaUJBQUE7QUFDRjtBQUNFO0VBQ0UsNkRBQUE7RUFDQSxZQUFBO0FBQ0o7QUFDSTtFQUNFLGVBQUE7QUFDTjs7QUFJQTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUNBLFNBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7QUFERjs7QUFJQTtFQUNFLGtCQUFBO0VBQ0Esa0JBQUE7RUFDQSx5QkFBQTtBQURGO0FBR0U7RUFDRSxlQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7QUFESjs7QUFLQTtFQUNFLGlCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxjQUFBO0FBRkY7O0FBS0E7RUFDRSxhQUFBO0VBQ0EsOEJBQUE7RUFDQSxtQkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7RUFDQSx5QkFBQTtBQUZGO0FBSUU7RUFDRSxtQkFBQTtFQUNBLDBCQUFBO0FBRko7QUFLRTtFQUNFLGdCQUFBO0FBSEo7O0FBT0E7RUFDRSxhQUFBO0VBQ0EsOEJBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0FBSkY7O0FBT0E7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxRQUFBO0FBSkY7QUFNRTtFQUNFLGVBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGNBQUE7QUFKSjtBQU9FO0VBQ0UsZ0JBQUE7RUFDQSxlQUFBO0FBTEo7O0FBU0E7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxRQUFBO0VBQ0EseUJBQUE7RUFDQSxlQUFBO0FBTkY7QUFRRTtFQUNFLGVBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtBQU5KOztBQVVBO0VBQ0UsYUFBQTtFQUNBLGdCQUFBO0VBQ0EsMEJBQUE7RUFDQSxlQUFBO0FBUEY7QUFVRTtFQUNFLGFBQUE7QUFSSjtBQVlFO0VBQ0UsY0FBQTtFQUNBLGdCQUFBO0FBVko7QUFjRTtFQUNFLGNBQUE7RUFDQSxxQkFBQTtBQVpKO0FBY0k7RUFDRSwwQkFBQTtBQVpOOztBQWlCQTtFQUNFLGFBQUE7RUFDQSx5QkFBQTtFQUNBLGVBQUE7QUFkRjtBQWdCRTtFQUNFLFlBQUE7RUFDQSw2QkFBQTtBQWRKO0FBZ0JJO0VBQ0UsVUFBQTtBQWROOztBQW9CQTtFQUNFO0lBQ0Usc0JBQUE7SUFDQSx1QkFBQTtJQUNBLFFBQUE7RUFqQkY7RUFvQkE7SUFDRSxlQUFBO0VBbEJGO0FBQ0Y7QUFzQkE7RUFDRTtJQUNFLG1CQUFBO0lBQ0EsMEJBQUE7RUFwQkY7RUFzQkU7SUFDRSxtQkFBQTtFQXBCSjtFQXdCQTtJQUNFLGdDQUFBO0VBdEJGO0VBeUJBO0lBQ0UsK0JBQUE7RUF2QkY7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi50ZWFtcy1jYXJkIHtcclxuICBtYXJnaW46IDE2cHggMDtcclxuICBtYXgtaGVpZ2h0OiA2MDBweDtcclxuICBcclxuICAudGVhbXMtYXZhdGFyIHtcclxuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsICM2MjY0YTcgMCUsICM1NTU4YzkgMTAwJSk7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBcclxuICAgIC5hdmF0YXItaWNvbiB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMjRweDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi5sb2FkaW5nLW1lc3NhZ2VzIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgZ2FwOiAxMnB4O1xyXG4gIHBhZGRpbmc6IDIwcHg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbn1cclxuXHJcbi5uby1tZXNzYWdlcyB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIHBhZGRpbmc6IDQwcHggMjBweDtcclxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjYpO1xyXG4gIFxyXG4gIG1hdC1pY29uIHtcclxuICAgIGZvbnQtc2l6ZTogNDhweDtcclxuICAgIHdpZHRoOiA0OHB4O1xyXG4gICAgaGVpZ2h0OiA0OHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTZweDtcclxuICAgIG9wYWNpdHk6IDAuNTtcclxuICB9XHJcbn1cclxuXHJcbi5tZXNzYWdlcy1jb250YWluZXIge1xyXG4gIG1heC1oZWlnaHQ6IDQwMHB4O1xyXG4gIG92ZXJmbG93LXk6IGF1dG87XHJcbiAgcGFkZGluZzogOHB4IDA7XHJcbn1cclxuXHJcbi5tZXNzYWdlLWl0ZW0ge1xyXG4gIHBhZGRpbmc6IDEycHg7XHJcbiAgYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAjNjI2NGE3O1xyXG4gIG1hcmdpbi1ib3R0b206IDEycHg7XHJcbiAgYmFja2dyb3VuZDogI2Y4ZjlmYTtcclxuICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTtcclxuICBcclxuICAmOmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQ6ICNmMGYwZjA7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMnB4KTtcclxuICB9XHJcbiAgXHJcbiAgJjpsYXN0LWNoaWxkIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgfVxyXG59XHJcblxyXG4ubWVzc2FnZS1oZWFkZXIge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xyXG59XHJcblxyXG4ubWVzc2FnZS1hdXRob3Ige1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBnYXA6IDZweDtcclxuICBcclxuICAuYXV0aG9yLWljb24ge1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgd2lkdGg6IDE2cHg7XHJcbiAgICBoZWlnaHQ6IDE2cHg7XHJcbiAgICBjb2xvcjogIzYyNjRhNztcclxuICB9XHJcbiAgXHJcbiAgLmF1dGhvci1uYW1lIHtcclxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgfVxyXG59XHJcblxyXG4ubWVzc2FnZS10aW1lIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgZ2FwOiA0cHg7XHJcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC42KTtcclxuICBmb250LXNpemU6IDEycHg7XHJcbiAgXHJcbiAgLnRpbWUtaWNvbiB7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICB3aWR0aDogMTRweDtcclxuICAgIGhlaWdodDogMTRweDtcclxuICB9XHJcbn1cclxuXHJcbi5tZXNzYWdlLWNvbnRlbnQge1xyXG4gIG1hcmdpbjogOHB4IDA7XHJcbiAgbGluZS1oZWlnaHQ6IDEuNDtcclxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjg3KTtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgXHJcbiAgLy8gSGFuZGxlIFRlYW1zIG1lc3NhZ2UgZm9ybWF0dGluZ1xyXG4gIHAge1xyXG4gICAgbWFyZ2luOiA0cHggMDtcclxuICB9XHJcbiAgXHJcbiAgLy8gU3R5bGUgbWVudGlvbnNcclxuICAubWVudGlvbiB7XHJcbiAgICBjb2xvcjogIzYyNjRhNztcclxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIFN0eWxlIGxpbmtzXHJcbiAgYSB7XHJcbiAgICBjb2xvcjogIzYyNjRhNztcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIFxyXG4gICAgJjpob3ZlciB7XHJcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLm1lc3NhZ2UtYWN0aW9ucyB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xyXG4gIG1hcmdpbi10b3A6IDhweDtcclxuICBcclxuICBidXR0b24ge1xyXG4gICAgb3BhY2l0eTogMC43O1xyXG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjJzIGVhc2U7XHJcbiAgICBcclxuICAgICY6aG92ZXIge1xyXG4gICAgICBvcGFjaXR5OiAxO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8gUmVzcG9uc2l2ZSBkZXNpZ25cclxuQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XHJcbiAgLm1lc3NhZ2UtaGVhZGVyIHtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcclxuICAgIGdhcDogNHB4O1xyXG4gIH1cclxuICBcclxuICAubWVzc2FnZS10aW1lIHtcclxuICAgIGZvbnQtc2l6ZTogMTFweDtcclxuICB9XHJcbn1cclxuXHJcbi8vIERhcmsgdGhlbWUgc3VwcG9ydFxyXG5AbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSB7XHJcbiAgLm1lc3NhZ2UtaXRlbSB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjMmQyZDJkO1xyXG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICM3YjY4ZWU7XHJcbiAgICBcclxuICAgICY6aG92ZXIge1xyXG4gICAgICBiYWNrZ3JvdW5kOiAjM2QzZDNkO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAubWVzc2FnZS1jb250ZW50IHtcclxuICAgIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuODcpO1xyXG4gIH1cclxuICBcclxuICAubWVzc2FnZS10aW1lIHtcclxuICAgIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNik7XHJcbiAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Subscription","i0","TeamsMessagesComponent","constructor","ngOnInit","loadMockMessages","refreshSub","setInterval","subscriptions","add","clearInterval","ngOnDestroy","unsubscribe","isLoading","setTimeout","messages","id","createdDateTime","Date","now","toISOString","body","content","contentType","from","user","displayName","importance","messageType","refreshMessages","configureChannels","console","log","alert","trackByMessageId","index","message","formatMessageTime","dateTime","date","diffMinutes","Math","floor","getTime","toLocaleDateString","sanitizeMessageContent","replace","substring","length","openInTeams","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\repos\\sharepoint\\src\\webparts\\uptimeStatus\\angularApp\\src\\app\\teams-messages\\teams-messages.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Observable, Subscription, combineLatest, of } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\n\r\n// Mock interfaces (will replace with real TeamsService later)\r\nexport interface TeamsMessage {\r\n  id: string;\r\n  createdDateTime: string;\r\n  body: {\r\n    content: string;\r\n    contentType: string;\r\n  };\r\n  from: {\r\n    user: {\r\n      displayName: string;\r\n      id: string;\r\n    };\r\n  };\r\n  importance: string;\r\n  messageType: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-teams-messages',\r\n  template: `\r\n    <mat-card class=\"teams-card\" appearance=\"outlined\">\r\n      <mat-card-header>\r\n        <div mat-card-avatar class=\"teams-avatar\">\r\n          <mat-icon class=\"avatar-icon\">forum</mat-icon>\r\n        </div>\r\n        <mat-card-title>Teams Messages</mat-card-title>\r\n        <mat-card-subtitle>Recent activity from monitored channels</mat-card-subtitle>\r\n      </mat-card-header>\r\n      \r\n      <mat-card-content>\r\n        <div *ngIf=\"isLoading\" class=\"loading-messages\">\r\n          <mat-spinner diameter=\"30\"></mat-spinner>\r\n          <span>Loading Teams messages...</span>\r\n        </div>\r\n\r\n        <div *ngIf=\"!isLoading && messages.length === 0\" class=\"no-messages\">\r\n          <mat-icon>chat_bubble_outline</mat-icon>\r\n          <p>No recent messages found</p>\r\n        </div>\r\n\r\n        <div class=\"messages-container\" *ngIf=\"!isLoading && messages.length > 0\">\r\n          <div class=\"message-item\" *ngFor=\"let message of messages; trackBy: trackByMessageId\">\r\n            <div class=\"message-header\">\r\n              <div class=\"message-author\">\r\n                <mat-icon class=\"author-icon\">person</mat-icon>\r\n                <span class=\"author-name\">{{ message.from.user.displayName }}</span>\r\n              </div>\r\n              <div class=\"message-time\">\r\n                <mat-icon class=\"time-icon\">schedule</mat-icon>\r\n                <span>{{ formatMessageTime(message.createdDateTime) }}</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"message-content\" [innerHTML]=\"sanitizeMessageContent(message.body.content)\">\r\n            </div>\r\n            \r\n            <div class=\"message-actions\">\r\n              <button mat-icon-button \r\n                      matTooltip=\"View in Teams\"\r\n                      (click)=\"openInTeams(message)\">\r\n                <mat-icon>open_in_new</mat-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </mat-card-content>\r\n\r\n      <mat-card-actions>\r\n        <button mat-button \r\n                color=\"primary\"\r\n                (click)=\"refreshMessages()\"\r\n                [disabled]=\"isLoading\">\r\n          <mat-icon>refresh</mat-icon>\r\n          Refresh Messages\r\n        </button>\r\n        \r\n        <button mat-button \r\n                color=\"accent\"\r\n                (click)=\"configureChannels()\">\r\n          <mat-icon>settings</mat-icon>\r\n          Configure Channels\r\n        </button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  `,\r\n  styleUrls: ['./teams-messages.component.scss']\r\n})\r\nexport class TeamsMessagesComponent implements OnInit, OnDestroy {\r\n  messages: TeamsMessage[] = [];\r\n  isLoading = true;\r\n  private subscriptions = new Subscription();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadMockMessages();\r\n    \r\n    // Auto-refresh every 30 seconds\r\n    const refreshSub = setInterval(() => {\r\n      this.loadMockMessages();\r\n    }, 30000);\r\n    \r\n    this.subscriptions.add(() => clearInterval(refreshSub));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n  // Mock data for demonstration\r\n  loadMockMessages(): void {\r\n    this.isLoading = true;\r\n    \r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      this.messages = [\r\n        {\r\n          id: '1',\r\n          createdDateTime: new Date(Date.now() - 300000).toISOString(), // 5 minutes ago\r\n          body: {\r\n            content: 'Server maintenance completed successfully. All systems are back online.',\r\n            contentType: 'text'\r\n          },\r\n          from: {\r\n            user: {\r\n              displayName: 'John Smith',\r\n              id: 'user1'\r\n            }\r\n          },\r\n          importance: 'high',\r\n          messageType: 'message'\r\n        },\r\n        {\r\n          id: '2',\r\n          createdDateTime: new Date(Date.now() - 900000).toISOString(), // 15 minutes ago\r\n          body: {\r\n            content: 'Monitoring dashboard looks great! üëç The uptime metrics are very helpful.',\r\n            contentType: 'text'\r\n          },\r\n          from: {\r\n            user: {\r\n              displayName: 'Sarah Johnson',\r\n              id: 'user2'\r\n            }\r\n          },\r\n          importance: 'normal',\r\n          messageType: 'message'\r\n        },\r\n        {\r\n          id: '3',\r\n          createdDateTime: new Date(Date.now() - 1800000).toISOString(), // 30 minutes ago\r\n          body: {\r\n            content: 'Alert: CPU usage spike detected on production server. Investigating...',\r\n            contentType: 'text'\r\n          },\r\n          from: {\r\n            user: {\r\n              displayName: 'DevOps Bot',\r\n              id: 'bot1'\r\n            }\r\n          },\r\n          importance: 'urgent',\r\n          messageType: 'message'\r\n        },\r\n        {\r\n          id: '4',\r\n          createdDateTime: new Date(Date.now() - 3600000).toISOString(), // 1 hour ago\r\n          body: {\r\n            content: 'Daily backup completed successfully. All data secured.',\r\n            contentType: 'text'\r\n          },\r\n          from: {\r\n            user: {\r\n              displayName: 'Backup Service',\r\n              id: 'service1'\r\n            }\r\n          },\r\n          importance: 'normal',\r\n          messageType: 'message'\r\n        }\r\n      ];\r\n      \r\n      this.isLoading = false;\r\n    }, 1500); // 1.5 second delay to show loading\r\n  }\r\n\r\n  refreshMessages(): void {\r\n    this.loadMockMessages();\r\n  }\r\n\r\n  configureChannels(): void {\r\n    // Open dialog to configure which channels to monitor\r\n    console.log('Configure channels dialog would open here');\r\n    alert('Channel configuration coming soon! This will let you choose which Teams channels to monitor.');\r\n  }\r\n\r\n  trackByMessageId(index: number, message: TeamsMessage): string {\r\n    return message.id;\r\n  }\r\n\r\n  formatMessageTime(dateTime: string): string {\r\n    const date = new Date(dateTime);\r\n    const now = new Date();\r\n    const diffMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\r\n    \r\n    if (diffMinutes < 1) return 'Just now';\r\n    if (diffMinutes < 60) return `${diffMinutes}m ago`;\r\n    if (diffMinutes < 1440) return `${Math.floor(diffMinutes / 60)}h ago`;\r\n    return date.toLocaleDateString();\r\n  }\r\n\r\n  sanitizeMessageContent(content: string): string {\r\n    // Basic HTML sanitization - in production, use DOMPurify\r\n    return content\r\n      .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\r\n      .replace(/javascript:/gi, '')\r\n      .substring(0, 200) + (content.length > 200 ? '...' : '');\r\n  }\r\n\r\n  openInTeams(message: TeamsMessage): void {\r\n    // Mock action - would open message in Teams client\r\n    console.log('Would open in Teams:', message);\r\n    alert(`Would open message from ${message.from.user.displayName} in Teams app`);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}